// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  USER
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  CINEMATIC
}

enum UserStatus {
  APPROVED
  BANNED
}

enum Visibility {
  VISIBLE
  HIDDEN
}

enum ContentType {
  MOVIE
  SERIES
  ANIME
  CARTOON
  LIVE_TV
  STREAMING
  GAMING
}

enum Quality {
  SD
  HD
  FULLHD
  K4
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  username       String        @unique
  passwordHash   String
  role           Role          @default(USER)
  plan           Plan          @default(FREE)
  status         UserStatus    @default(APPROVED)
  credits        Int           @default(0)
  commentsCount  Int           @default(0)
  reviewsCount   Int           @default(0)
  reviews        Review[]
  comments       Comment[]
  purchases      Purchase[]
  watchlist      Watchlist[]
  creditEvents   CreditEvent[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Content {
  id             Int           @id @default(autoincrement())
  title          String
  type           ContentType
  status         Visibility    @default(VISIBLE)
  rating         Float         @default(0)
  views          Int           @default(0)
  price          Int?          // credits
  mediaUrl       String?
  imageUrl       String?
  trailerUrl     String?
  quality        Quality?
  age            String?
  description    String?
  longDescription String?
  genres         String[]      // Postgres array
  runtime        String?
  premiereDate   DateTime?
  coverUrl       String?
  backgroundUrl  String?
  country        String?
  director       String?
  actors         String[]      // Postgres array
  seasons        Int?
  episodes       Int?

  reviews        Review[]
  comments       Comment[]
  purchases      Purchase[]
  watchlistedBy  Watchlist[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([type, status])
  @@index([title])
}

model Review {
  id        String   @id @default(cuid())
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  rating    Int      // 1..5
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contentId, userId])
  @@index([userId])
}

model Comment {
  id        String        @id @default(cuid())
  content   Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  text      String
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([contentId, status])
  @@index([userId])
}

model Purchase {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId  Int
  pricePaid  Int
  createdAt  DateTime @default(now())

  @@unique([userId, contentId])
  @@index([contentId])
}

model Watchlist {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId Int
  addedAt   DateTime @default(now())

  @@id([userId, contentId])
  @@index([contentId])
}

enum CreditOp {
  ADD
  SET
  RESET
}

model CreditEvent {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  op        CreditOp
  amount    Int      // For SET, the new balance; for ADD, delta; for RESET, 0
  note      String?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}
